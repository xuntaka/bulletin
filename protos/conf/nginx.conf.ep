% my $zone = $config->{domain}; $zone =~ s/\./_/g;
% $config->{https} = {on => $config->{https}} unless ref $config->{https};
% my $is_dev = 1;

% if ($config->{server_req_limit}) {
	limit_req_zone $binary_remote_addr zone=<%= $zone %>_req:10m rate=<%= $config->{server_req_limit} %>r/s;
% }
% if ($config->{server_conn_limit}) {
	limit_conn_zone $binary_remote_addr zone=<%= $zone %>_conn:10m;
% }

server {
	% if ($config->{https}{on}) {
	listen    *:443 ssl <%= $config->{https}{on} if $config->{https}{on} =~ /spdy|http2/ %>;
	% unless ($config->{https}{http_redir}) {
	listen    *:80;
	% }
	% } else {
	listen    *:80;
	%}
	% if ($config->{ipv6}) {
	%# ipv6only=on можно прописать только 1 раз, для default хоста. ipv6only включен по умолчанию c 1.3.4+
	listen [::]:80;
	% if ($config->{https}{on}) {
	listen [::]:443 ssl <%= $config->{https}{on} if $config->{https}{on} =~ /spdy|http2/ %>;
	% }
	% }
	server_name <%= $config->{domain} %>;

	% if ($config->{https}{on} && $config->{https}{letsencrypt}) {
		ssl_certificate      /etc/letsencrypt/live/<%= $config->{domain} %>/fullchain.pem;
		ssl_certificate_key  /etc/letsencrypt/live/<%= $config->{domain} %>/privkey.pem;

		include /etc/letsencrypt/options-ssl-nginx.conf;
		ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
	% }

	charset utf-8; # for *.html

	proxy_http_version 1.1;
	proxy_set_header   Host                $host;
	proxy_set_header   X-Real-IP           $remote_addr;
	proxy_set_header   X-Real-Host         $host;
	proxy_set_header   X-Forwarded-For     $proxy_add_x_forwarded_for;
	proxy_set_header   HTTPS               $https;
	proxy_set_header   X-Forwarded-HTTPS   $https;
	proxy_set_header   X-Forwarded-Proto   $scheme;
	proxy_set_header   Upgrade             $http_upgrade;
	proxy_set_header   Connection          "upgrade";

	access_log <%= $approot %>/log/nginx.access.log;
  % if ($config->{logs}{full}) {
	access_log <%= $approot %>/log/nginx.full.log full;
  % }
	error_log  <%= $approot %>/log/nginx.error.log;

	root       <%= $approot %>/public/;

	rewrite ^/(favicon\.ico)$ /s/i/$1; #/
	rewrite ^/(apple-touch-icon.*\.png)$ /s/i/$1; #/

	proxy_intercept_errors on;
	% if (!$config->{show_errors} || $config->{no_auth}) {
	error_page 500 502 503 504 /502.html;
	% }
	error_page 410 /410.html;

	# Limit post body size.
	client_max_body_size 20m;

	location / {
		<%= $config->{no_auth} ? '#' : '' %>auth_basic "Lasciate ogni speranza, voi ch'entrate"; auth_basic_user_file <%= $approot %>/conf/.htpasswd;
		proxy_pass http://127.0.0.1:<%= $config->{port} || 5000 %>;
		proxy_read_timeout 300;

		if ($request_method = 'OPTIONS') {
		add_header 'Access-Control-Allow-Origin' '*';
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
		add_header 'Access-Control-Max-Age' 1728000;
		add_header 'Content-Type' 'text/plain charset=UTF-8';
		add_header 'Content-Length' 0;

		return 204;
		}

	if ($request_method = 'POST') {
		add_header 'Access-Control-Allow-Origin' '*';
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
		add_header 'Access-Control-Expose-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
	}

	if ($request_method = 'GET') {
		add_header 'Access-Control-Allow-Origin' '*';
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
		add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
		add_header 'Access-Control-Expose-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
	}

		% if ($config->{server_req_limit}) {
			limit_req zone=<%= $zone %>_req <%= $config->{server_req_burst} ? 'burst='.$config->{server_req_burst} : ''%>;
		% }
		% if ($config->{server_conn_limit}) {
			limit_conn <%= $zone %>_conn <%= $config->{server_conn_limit} %>;
		% }
	}

	location = /502.html {
		expires epoch;
	}

	location ^~ /offer/ {
		expires 0;
	}

	location ^~ /landing/ {
	}

	location ^~ /s/ {
		access_log off;
		expires    '30d';
		add_header Cache-Control public;
	}

	location ^~ /mojo/ {
		access_log off;
		expires    0;
		add_header Cache-Control public;
	}
}

server {
	listen    *:80;
	server_name www.<%= $config->{domain} %>;
	rewrite (.*) http://<%= $config->{domain} %>$1 permanent;
}


% if ($config->{https}{on} && $config->{https}{http_redir}) {
server {
    listen *:80;
    server_name <%= $config->{domain} %>;

    ### Discourage deep links by using a permanent redirect to home page of HTTPS site
    ###return 301 https://$host;

    # Alternatively, redirect all HTTP links to the matching HTTPS page
    return 301 https://$host$request_uri;
}
% }
